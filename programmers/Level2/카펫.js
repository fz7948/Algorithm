// 프로그래머스 - 카펫

// 주어진 값 -> brown 개수, yellow 개수
// 구하는 값 -> 카펫의 가로, 세로 크기
// yellow를 1줄의 테두리로 감싸는 카펫의 사이즈를 리턴해야 한다 (조건 1)
// 가로 >= 세로 (조건 2)

// brown + yellow로 나올수 있는 사이즈의 종류 -> 전체사이즈의 약수
// ex) brown = 24 yellow = 24일 때,
// [3, 16], [4, 12], [6, 8] 등이 가능
// 하지만 [3, 16], [4, 12]의 경우 조건 1을 만족할 수 없다 -> yellow가 24개이므로 2줄안에 정렬이 불가능

// 조건 1과 조건 2를 만족하려면 다음과 같은 규칙이 필요
// brown 개수 = 가로*2 + (세로-2)*2 = (가로+세로-2)*2
// -> 위, 아래 가로의 길이와 가로의 길이에서 -2씩을 뺀 세로 길이 2개를 더해준다 (가로는 세로보다 길다)
// yellow 개수 = (가로-2) * (세로-2)
// -> 중앙의 yellow 직사각형 (테두리로 감싸진 사이즈를 제외한채 가로 세로 길이를 곱한다)

// 전체사이즈에서 나올수 있는 사이즈의 종류중에 규칙을 만족하는 사이즈를 리턴하면 된다

function solution(brown, yellow) {
  let size = brown + yellow;
  for (let i = 3; i <= Math.sqrt(size); i++) {
    if (size % i === 0) {
      let h = i;
      let l = size / h;
      if ((l - 2) * (h - 2) === yellow && (l + h - 2) * 2 === brown) {
        return [l, h];
      }
    }
  }
}
